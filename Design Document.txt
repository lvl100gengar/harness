File Transfer Harness
=====================
The application will allow users to configure file transfers at specified
intervals using HTTP(S) or SFTP. I am taking inspiration from load testing 
tools like k6. The harness enables testing of complex applications that process 
files and place them on destination servers.

Design Guidelines
=================
1. The application should work on current Linux OS, particularly RHEL 9, but
APIs which are platform-independent should be preferred.

2. The application should have a powerful and well-designed CLI.
No interactive mode required.

3. Include good logs that can help debug the application or network connectivity 
issues.

4. This application is intended to be long-running, so error handling should be
robust. Some errors, such as failing to connect to a server, are possible outcomes 
for the load test and should not cause the test to stop.

5. Use Python 3 to implement this project. Use best practices and Pythonic design
patterns. Determine best package references to implement the features below.


Features
========
1. While CLI flags can be used, the application should be fully configurable 
in a config file (YAML or something easily user-editable). Ensure this is 
user friendly and not tedious (e.g. handle whitespace). A well-documented sample
config should be provided to enable user to get started quickly.

2. The application should provide a way for users to configure HTTP(S) jobs.
An HTTP(S) job has a configurable username, method (e.g., POST), URL, SSL key/cert 
path (optional), a path to a directory containing files to send, a way to specify 
rate to send, and a way to specify ramp rate for breakpoint testing. Also allow users 
to configure HTTP headers, including the ability to generate UUIDs and include filename 
for each request. Rates are specified using files per period (e.g., files/hour).

3. The application should provide a way for users to configure SFTP jobs.
An SFTP job is always a PUT. An SFTP job should have options for username, SSH key path
(optional) or password, a path to a directory containing files to send, a way to specify 
rate to send, and a way to specify ramp rate for breakpoint testing. Rates are specified 
using files per period (e.g., files/hour).

4. The application should be capable of executing several jobs concurrently. The 
idea is to simulate loads on the system where multiple data sources are uploading
simultaneously. Use thread/async APIs and ensure application remains responsive.